# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rubocop-i18n/all/rubocop-i18n.rbi
#
# rubocop-i18n-3.0.0

module RuboCop
end
module RuboCop::Cop
end
module RuboCop::Cop::I18n
end
module RuboCop::Cop::I18n::GetText
  def self.supported_decorator?(decorator_name); end
  def self.supported_decorators; end
  def self.supported_method?(method_name); end
  def self.supported_methods; end
end
class RuboCop::Cop::I18n::GetText::DecorateString < RuboCop::Cop::Cop
  def autocorrect(node); end
  def check_for_parent_decorator(node); end
  def dstr_contains_sentence?(node); end
  def on_dstr(node); end
  def on_str(node); end
  def sentence?(node); end
  def single_string_correct(node); end
end
class RuboCop::Cop::I18n::GetText::DecorateFunctionMessage < RuboCop::Cop::Cop
  def already_decorated?(node, parent = nil); end
  def autocorrect(node); end
  def concatenation_offense?(node, parent = nil); end
  def contains_string?(nodes); end
  def detect_and_report(_node, message_section, method_name); end
  def how_bad_is_it(message_section); end
  def interpolation_correct(node); end
  def interpolation_offense?(node, parent = nil); end
  def on_send(node); end
  def single_string_correct(node); end
  def string_constant?(nodes); end
end
class RuboCop::Cop::I18n::GetText::DecorateStringFormattingUsingInterpolation < RuboCop::Cop::Cop
  def contains_string_formatting_with_interpolation?(node); end
  def on_send(node); end
  def string_contains_interpolation_format?(str); end
end
class RuboCop::Cop::I18n::GetText::DecorateStringFormattingUsingPercent < RuboCop::Cop::Cop
  def contains_string_with_percent_format?(node); end
  def on_send(node); end
  def string_contains_percent_format?(str); end
end
module RuboCop::Cop::I18n::RailsI18n
  def self.supported_decorator?(decorator_name); end
  def self.supported_decorators; end
end
class RuboCop::Cop::I18n::RailsI18n::DecorateString < RuboCop::Cop::Cop
  def check_for_parent_decorator(node); end
  def dstr_contains_sentence?(node); end
  def ignoring_raised_parent?(parent); end
  def on_dstr(node); end
  def on_str(node); end
  def parent_is_indexer?(parent); end
  def parent_is_translator?(parent); end
  def regexp; end
  def regexp_from_config; end
  def regexp_from_string_type; end
  def sentence?(node); end
end
class RuboCop::Cop::I18n::RailsI18n::DecorateStringFormattingUsingInterpolation < RuboCop::Cop::Cop
  def contains_string_formatting_with_interpolation?(node); end
  def error_message(method_name); end
  def on_send(node); end
  def string_contains_interpolation_format?(str); end
end
